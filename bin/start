#!/usr/bin/env bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${YELLOW}â†’${NC} $1"
}

# Default values
SEED_DATABASE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --seed|-s)
            SEED_DATABASE=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --seed, -s    Seed the database with DatabaseSeeder"
            echo "  --help, -h    Show this help message"
            echo ""
            echo "This script will:"
            echo "  1. Build and start Docker containers"
            echo "  2. Copy .env.example to .env if needed"
            echo "  3. Install composer dependencies"
            echo "  4. Generate application key"
            echo "  5. Run database migrations"
            echo "  6. Optionally seed the database"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Run '$0 --help' for usage information"
            exit 1
            ;;
    esac
done

print_info "Starting Laravel Docker environment setup..."
echo ""

# Step 1: Build and start containers
print_info "Building and starting Docker containers..."
docker-compose down 2>/dev/null || true
docker-compose up -d --build

# Wait for MySQL to be ready
print_info "Waiting for MySQL to be ready..."
MAX_TRIES=30
TRIES=0
while ! docker-compose exec -T mysql mysqladmin ping -h localhost --silent 2>/dev/null; do
    TRIES=$((TRIES + 1))
    if [ $TRIES -gt $MAX_TRIES ]; then
        print_error "MySQL failed to start after $MAX_TRIES attempts"
        exit 1
    fi
    echo -n "."
    sleep 2
done
echo ""
print_success "MySQL is ready"

# Step 2: Copy .env.example if .env doesn't exist and generate the application key
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        print_info "Creating .env file from .env.example..."
        cp .env.example .env
        print_success ".env file created"

        print_info "Generating application key..."
        docker-compose exec -T app php artisan key:generate --ansi
        print_success "Application key generated"

    else
        print_error ".env.example file not found!"
        exit 1
    fi
else
    print_info ".env file already exists, skipping..."
fi

# Step 3: Install composer dependencies
print_info "Installing composer dependencies..."
docker-compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader
print_success "Composer dependencies installed"

# Step 4: Run migrations
print_info "Running database migrations..."
docker-compose exec -T app php artisan migrate --force --ansi
print_success "Database migrations completed"

# Step 5: Optionally seed the database
if [ "$SEED_DATABASE" = true ]; then
    print_info "Seeding the database..."
    docker-compose exec -T app php artisan migrate:fresh --seeder=DatabaseSeeder --force --ansi
    print_success "Database seeding completed"
fi

# Step 6: Clear caches
print_info "Clearing caches..."
docker-compose exec -T app php artisan config:clear
docker-compose exec -T app php artisan cache:clear
docker-compose exec -T app php artisan view:clear
print_success "Caches cleared"

# Step 7: Set permissions
print_info "Setting permissions..."
docker-compose exec -T app chmod -R 775 storage bootstrap/cache 2>/dev/null || true
print_success "Permissions set"

echo ""
print_success "Laravel Docker environment is ready!"
echo ""
echo "ðŸš€ Your application is running at: http://localhost:8000"
echo ""
echo "Useful commands:"
echo "  docker-compose exec app bash     - Enter the app container"
echo "  docker-compose exec app php artisan tinker - Run tinker"
echo "  docker-compose logs -f           - View all logs"
echo "  docker-compose down              - Stop all containers"
echo ""

# Check if we can actually connect to the app
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q "200\|302\|404"; then
    print_success "Application is responding at http://localhost:8000"
else
    print_error "Warning: Application may not be responding correctly"
    echo "Check the logs with: docker-compose logs webserver"
fi
